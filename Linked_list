#include <iostream>
using namespace std;

// Node structure for the linked list
struct Node {
    int row;
    int col;
    int value;
    Node* next;

    // Constructor
    Node(int r, int c, int val) : row(r), col(c), value(val), next(nullptr) {}
};

class SparseMatrix {
private:
    Node* head; // Head of the linked list
    int rows, cols;

public:
    // Constructor
    SparseMatrix(int r, int c) : rows(r), cols(c), head(nullptr) {}

    // Destructor to clean up memory
    ~SparseMatrix() {
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    // Insert a non-zero element into the linked list
    void insert(int r, int c, int val) {
        Node* newNode = new Node(r, c, val);
        if (!head) {
            head = newNode;
        }
        else {
            Node* temp = head;
            while (temp->next) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    // Display the sparse matrix in triplet form
    void displayTriplets() {
        cout << "\nSparse Matrix (Row Column Value):" << endl;
        Node* temp = head;
        while (temp) {
            cout << temp->row << " " << temp->col << " " << temp->value << endl;
            temp = temp->next;
        }
    }

    // Display the sparse matrix in 2D form
    void displayMatrix() {
        cout << "\nSparse Matrix (2D Form):" << endl;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                Node* temp = head;
                bool found = false;
                while (temp) {
                    if (temp->row == i && temp->col == j) {
                        cout << temp->value << " ";
                        found = true;
                        break;
                    }
                    temp = temp->next;
                }
                if (!found) {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }
};

int main() {
    int rows, cols, nonZero;

    // Input matrix details
    cout << "Enter number of rows, columns, and non-zero elements: ";
    cin >> rows >> cols >> nonZero;

    SparseMatrix sm(rows, cols);

    // Input non-zero elements
    cout << "Enter non-zero elements (row column value):" << endl;
    for (int i = 0; i < nonZero; i++) {
        int r, c, val;
        cin >> r >> c >> val;
        sm.insert(r, c, val);
    }

    // Display the sparse matrix
    sm.displayTriplets();
    sm.displayMatrix();

    return 0;
}
